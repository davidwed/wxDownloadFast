# Projeto: wxDownload Fast
RESOURCE_DIR = resources/
SOURCE_DIR = src/
LANGUAGE_DIR = languages/
MANPAGE_DIR = man/
BUILD_DIR = build-gcc/
CPP  = $(CROSS_PREFIX)g++
CC   = $(CROSS_PREFIX)gcc
AR   = $(CROSS_PREFIX)ar
WINDRES = $(CROSS_PREFIX)windres
STRIP = $(CROSS_PREFIX)strip

ifeq ($(DEBUG), 1)
	WXCONFIG = $(WXWIDGETS_DIR)wx-config --debug=yes
else
	WXCONFIG = $(WXWIDGETS_DIR)wx-config --debug=no
endif

WXRC = wxrc
INSTALL = /usr/bin/install
INSTALL_FILE = $(INSTALL) -m 644
INSTALL_DIR = $(INSTALL) -d 

OBJ_TMP  = $(BUILD_DIR)BoxFind.o $(BUILD_DIR)BoxNew.o $(BUILD_DIR)BoxOptions.o $(BUILD_DIR)DownloadFile.o $(BUILD_DIR)DownloadThread.o $(BUILD_DIR)FinishedList.o $(BUILD_DIR)ftp.o $(BUILD_DIR)Graph.o $(BUILD_DIR)InProgressList.o $(BUILD_DIR)MainFrame.o $(BUILD_DIR)TaskBarIcon.o $(BUILD_DIR)urlname.o $(BUILD_DIR)wxDFast.o $(BUILD_DIR)UtilFunctions.o

ifeq ($(XRC), 1)
	OBJ = $(OBJ_TMP)
else
	OBJ =$(OBJ_TMP) $(BUILD_DIR)Resources.o
endif

LINKOBJ  = $(OBJ)
LIBS =  -L$(BUILD_DIR) -lwxmd5  -Wl `$(WXCONFIG) --libs`
INCS =  `$(WXCONFIG) --cxxflags`

ifeq ($(WXWIDGETS_DIR)1, 1)
	RESINCS = --include-dir="/usr/local/include/wx-2.6"
else
	RESINCS = --include-dir="$(WXWIDGETS_DIR)include"
endif


ifeq ($(XRC), 1)
	XRC_PARAM =
else
	XRC_PARAM = -D RESOURCES_CPP
endif

ifeq ($(DEBUG), 1)
	DEBUG_PARAM = -g -ggdb
else
	DEBUG_PARAM =
endif

ifeq ($(CPU)0, 0)
	CPU_PARAM = 
else
	CPU_PARAM = -mtune=$(CPU)
endif

WXMD5 = libwxmd5.a
CXXFLAGS = $(INCS) -Wall -O2 -MMD $(CPU_PARAM) $(XRC_PARAM) $(DEBUG_PARAM)
BIN = wxdfast
RES = $(BIN).res
VERSION = 0.4.4
DEBIANPACK = 1

ifeq ($(BUILD), win32)

all: criardir $(BIN).exe

$(BIN).exe: $(LINKOBJ) $(WXMD5) $(RES)
	$(CPP) $(LINKOBJ) -o $(BIN).exe $(LIBS) $(BUILD_DIR)$(RES) $(CXXFLAGS)
	$(STRIP) $(BIN).exe
else
all: criardir $(BIN)

$(BIN): $(LINKOBJ) $(WXMD5)
	$(CPP) $(LINKOBJ) -o $(BIN) $(LIBS) $(CXXFLAGS)
#	$(STRIP) $(BIN)
endif

$(BUILD_DIR)Resources.cpp: $(RESOURCE_DIR)boxnew.xrc $(RESOURCE_DIR)boxoptions.xrc $(RESOURCE_DIR)mainwindow.xrc
ifeq ($(XRC), 1)
	
else
	$(WXRC) -c -o $(BUILD_DIR)Resources.cpp resources/*.xrc
endif

criardir:
	if [ ! -e $(BUILD_DIR) ]; then mkdir "$(BUILD_DIR)"; fi

$(BUILD_DIR)Resources.o: $(BUILD_DIR)Resources.cpp
	$(CPP) -c $(BUILD_DIR)Resources.cpp -o $(BUILD_DIR)Resources.o $(CXXFLAGS)

$(BUILD_DIR)BoxFind.o: src/BoxFind.cpp
	$(CPP) -c src/BoxFind.cpp -o $(BUILD_DIR)BoxFind.o $(CXXFLAGS)

$(BUILD_DIR)BoxNew.o: src/BoxNew.cpp
	$(CPP) -c src/BoxNew.cpp -o $(BUILD_DIR)BoxNew.o $(CXXFLAGS)

$(BUILD_DIR)BoxOptions.o: src/BoxOptions.cpp
	$(CPP) -c src/BoxOptions.cpp -o $(BUILD_DIR)BoxOptions.o $(CXXFLAGS)

$(BUILD_DIR)DownloadFile.o: src/DownloadFile.cpp
	$(CPP) -c src/DownloadFile.cpp -o $(BUILD_DIR)DownloadFile.o $(CXXFLAGS)

$(BUILD_DIR)DownloadThread.o: src/DownloadThread.cpp
	$(CPP) -c src/DownloadThread.cpp -o $(BUILD_DIR)DownloadThread.o $(CXXFLAGS)

$(BUILD_DIR)FinishedList.o: src/FinishedList.cpp
	$(CPP) -c src/FinishedList.cpp -o $(BUILD_DIR)FinishedList.o $(CXXFLAGS)

$(BUILD_DIR)ftp.o: src/ftp.cpp
	$(CPP) -c src/ftp.cpp -o $(BUILD_DIR)ftp.o $(CXXFLAGS)

$(BUILD_DIR)Graph.o: src/Graph.cpp
	$(CPP) -c src/Graph.cpp -o $(BUILD_DIR)Graph.o $(CXXFLAGS)

$(BUILD_DIR)InProgressList.o: src/InProgressList.cpp
	$(CPP) -c src/InProgressList.cpp -o $(BUILD_DIR)InProgressList.o $(CXXFLAGS)

$(BUILD_DIR)MainFrame.o: src/MainFrame.cpp
	$(CPP) -c src/MainFrame.cpp -o $(BUILD_DIR)MainFrame.o $(CXXFLAGS)

$(BUILD_DIR)TaskBarIcon.o: src/TaskBarIcon.cpp
	$(CPP) -c src/TaskBarIcon.cpp -o $(BUILD_DIR)TaskBarIcon.o $(CXXFLAGS)

$(BUILD_DIR)urlname.o: src/urlname.cpp
	$(CPP) -c src/urlname.cpp -o $(BUILD_DIR)urlname.o $(CXXFLAGS)

$(BUILD_DIR)UtilFunctions.o: src/UtilFunctions.cpp
	$(CPP) -c src/UtilFunctions.cpp -o $(BUILD_DIR)UtilFunctions.o $(CXXFLAGS)

$(BUILD_DIR)wxDFast.o: src/wxDFast.cpp
	$(CPP) -c src/wxDFast.cpp -o $(BUILD_DIR)wxDFast.o $(CXXFLAGS)

$(RES): src/wxDFast.rc 
	$(WINDRES) -i src/wxDFast.rc -J rc -o $(BUILD_DIR)$(RES) -O coff $(RESINCS)

$(WXMD5): $(BUILD_DIR)md5.o $(BUILD_DIR)wxMD5.o
	$(AR) cur $(BUILD_DIR)$(WXMD5) $(BUILD_DIR)wxMD5.o $(BUILD_DIR)md5.o

$(BUILD_DIR)md5.o: src/wxMD5/md5.c
	$(CPP) -c src/wxMD5/md5.c -o $(BUILD_DIR)md5.o $(CXXFLAGS)

$(BUILD_DIR)wxMD5.o: src/wxMD5/wxMD5.cpp
	$(CPP) -c src/wxMD5/wxMD5.cpp -o $(BUILD_DIR)wxMD5.o $(CXXFLAGS)

install: all
	$(INSTALL_DIR) $(DESTDIR)/usr/lib/$(BIN)
ifeq ($(BUILD), win32)
	$(INSTALL_FILE) --mode=755 $(BIN).exe $(DESTDIR)/usr/bin/$(BIN)
else
	$(INSTALL_FILE) --mode=755 $(BIN) $(DESTDIR)/usr/bin/$(BIN)
endif
	$(INSTALL_FILE) Readme.* $(DESTDIR)/usr/lib/$(BIN)
	$(INSTALL_FILE) Changes.* $(DESTDIR)/usr/lib/$(BIN)
	$(INSTALL_FILE) gpl.txt $(DESTDIR)/usr/lib/$(BIN)
	$(INSTALL_DIR) $(DESTDIR)/usr/share/pixmaps
	$(INSTALL_FILE) $(RESOURCE_DIR)wxdfast.xpm $(DESTDIR)/usr/share/pixmaps
	$(INSTALL_DIR) $(DESTDIR)/usr/share/$(BIN)
	$(INSTALL_FILE) $(RESOURCE_DIR)wxdfast.ico $(DESTDIR)/usr/share/$(BIN)
ifeq ($(XRC), 1)
	$(INSTALL_FILE) $(RESOURCE_DIR)*.xrc $(DESTDIR)/usr/lib/$(BIN)/$(RESOURCE_DIR)
endif
	$(INSTALL_DIR) $(DESTDIR)/usr/share/locale/pt_BR/LC_MESSAGES
	$(INSTALL_FILE) $(LANGUAGE_DIR)pt_BR/wxDFast.mo $(DESTDIR)/usr/share/locale/pt_BR/LC_MESSAGES
	$(INSTALL_DIR) $(DESTDIR)/usr/share/locale/es/LC_MESSAGES
	$(INSTALL_FILE) $(LANGUAGE_DIR)es/wxDFast.mo $(DESTDIR)/usr/share/locale/es/LC_MESSAGES
	$(INSTALL_DIR) $(DESTDIR)/usr/share/locale/de/LC_MESSAGES
	$(INSTALL_FILE) $(LANGUAGE_DIR)de/wxDFast.mo $(DESTDIR)/usr/share/locale/de/LC_MESSAGES
	$(INSTALL_DIR) $(DESTDIR)/usr/share/man/man1
	$(INSTALL_FILE) $(MANPAGE_DIR)man1/wxdfast.1.gz $(DESTDIR)/usr/share/man/man1
	$(INSTALL_DIR) $(DESTDIR)/usr/share/man/pt_BR/man1
	$(INSTALL_FILE) $(MANPAGE_DIR)pt_BR/man1/wxdfast.1.gz $(DESTDIR)/usr/share/man/pt_BR/man1
	$(INSTALL_DIR) $(DESTDIR)/usr/share/man/pt/man1
	$(INSTALL_FILE) $(MANPAGE_DIR)pt_BR/man1/wxdfast.1.gz $(DESTDIR)/usr/share/man/pt/man1
	$(INSTALL_DIR) $(DESTDIR)/usr/share/menu
	$(INSTALL_FILE) $(RESOURCE_DIR)wxdfast $(DESTDIR)/usr/share/menu
	$(INSTALL_DIR) $(DESTDIR)/usr/share/applications
	$(INSTALL_FILE) $(RESOURCE_DIR)wxdfast.desktop $(DESTDIR)/usr/share/applications

uninstall:
ifeq ($(BUILD), win32)
	rm -f $(DESTDIR)/usr/bin/$(BIN).exe
else
	rm -f $(DESTDIR)/usr/bin/$(BIN)
endif
	rm -f $(DESTDIR)/usr/lib/$(BIN)/Readme.*
	rm -f $(DESTDIR)/usr/lib/$(BIN)/Changes.*
	rm -f $(DESTDIR)/usr/lib/$(BIN)/gpl.txt
	rm -f $(DESTDIR)/usr/share/pixmaps/wxdfast.xpm
	rm -f $(DESTDIR)/usr/lib/$(BIN)/wxdfast.ico
	rm -f $(DESTDIR)/usr/lib/$(BIN)/$(RESOURCE_DIR)*.xrc
	rm -f $(DESTDIR)/usr/share/locale/pt_BR/LC_MESSAGES/wxDFast.mo
	rm -f $(DESTDIR)/usr/share/locale/es/LC_MESSAGES/wxDFast.mo
	rm -f $(DESTDIR)/usr/share/locale/de/LC_MESSAGES/wxDFast.mo
	rm -f $(DESTDIR)/usr/share/man/man1/wxdfast.1.gz
	rm -f $(DESTDIR)/usr/share/man/pt/man1/wxdfast.1.gz
	rm -f $(DESTDIR)/usr/share/man/pt_BR/man1/wxdfast.1.gz
	rm -f $(DESTDIR)/usr/share/menu/wxdfast
	rm -f $(DESTDIR)/usr/share/applications/wxdfast.desktop
	rmdir $(DESTDIR)/usr/lib/$(BIN)
	if [ -x /usr/bin/update-menus ] ; then update-menus ; fi

dist: source
	tar -cf $(BIN)-$(VERSION)-src.tar $(BIN)-$(VERSION)
	gzip $(BIN)-$(VERSION)-src.tar
	rm -r $(BIN)-$(VERSION)

deb: clean
	dpkg-buildpackage -rfakeroot

source:
	rm -f $(BIN)-$(VERSION)-src.tar.gz
	rm -rf $(BIN)-$(VERSION)
	mkdir $(BIN)-$(VERSION)
	mkdir $(BIN)-$(VERSION)/$(LANGUAGE_DIR)
	mkdir $(BIN)-$(VERSION)/$(LANGUAGE_DIR)pt_BR
	cp $(LANGUAGE_DIR)pt_BR/wxDFast.* $(BIN)-$(VERSION)/$(LANGUAGE_DIR)pt_BR
	mkdir $(BIN)-$(VERSION)/$(LANGUAGE_DIR)es
	cp $(LANGUAGE_DIR)es/wxDFast.* $(BIN)-$(VERSION)/$(LANGUAGE_DIR)es
	mkdir $(BIN)-$(VERSION)/$(LANGUAGE_DIR)de
	cp $(LANGUAGE_DIR)de/wxDFast.* $(BIN)-$(VERSION)/$(LANGUAGE_DIR)de
	mkdir $(BIN)-$(VERSION)/$(MANPAGE_DIR)
	mkdir $(BIN)-$(VERSION)/$(MANPAGE_DIR)man1
	cp $(MANPAGE_DIR)man1/wxdfast.1.gz $(BIN)-$(VERSION)/$(MANPAGE_DIR)man1
	mkdir $(BIN)-$(VERSION)/$(MANPAGE_DIR)pt_BR
	mkdir $(BIN)-$(VERSION)/$(MANPAGE_DIR)pt_BR/man1
	cp $(MANPAGE_DIR)pt_BR/man1/wxdfast.1.gz $(BIN)-$(VERSION)/$(MANPAGE_DIR)pt_BR/man1
	mkdir $(BIN)-$(VERSION)/resources
	cp $(RESOURCE_DIR)*.xpm $(BIN)-$(VERSION)/$(RESOURCE_DIR)
	cp $(RESOURCE_DIR)*.ico $(BIN)-$(VERSION)/$(RESOURCE_DIR)
	cp $(RESOURCE_DIR)*.xrc $(BIN)-$(VERSION)/$(RESOURCE_DIR)
	cp $(RESOURCE_DIR)wxdfast.desktop $(BIN)-$(VERSION)/$(RESOURCE_DIR)
	cp $(RESOURCE_DIR)wxdfast $(BIN)-$(VERSION)/$(RESOURCE_DIR)
	mkdir $(BIN)-$(VERSION)/$(RESOURCE_DIR)small
	cp $(RESOURCE_DIR)small/*.xpm $(BIN)-$(VERSION)/$(RESOURCE_DIR)small
	mkdir $(BIN)-$(VERSION)/$(RESOURCE_DIR)big
	cp $(RESOURCE_DIR)big/*.xpm $(BIN)-$(VERSION)/$(RESOURCE_DIR)big
	mkdir $(BIN)-$(VERSION)/$(SOURCE_DIR)
	mkdir $(BIN)-$(VERSION)/src/wxMD5
	cp gpl.txt $(BIN)-$(VERSION)
	cp Readme.* $(BIN)-$(VERSION)
	cp Changes.* $(BIN)-$(VERSION)
	cp ToDo.* $(BIN)-$(VERSION)
	cp $(SOURCE_DIR)*.cpp $(BIN)-$(VERSION)/$(SOURCE_DIR)
	cp $(SOURCE_DIR)*.h $(BIN)-$(VERSION)/$(SOURCE_DIR)
	cp $(SOURCE_DIR)*.rc $(BIN)-$(VERSION)/$(SOURCE_DIR)
	cp $(SOURCE_DIR)wxMD5/*.c $(BIN)-$(VERSION)/$(SOURCE_DIR)wxMD5
	cp $(SOURCE_DIR)wxMD5/*.cpp $(BIN)-$(VERSION)/$(SOURCE_DIR)wxMD5
	cp $(SOURCE_DIR)wxMD5/*.h $(BIN)-$(VERSION)/$(SOURCE_DIR)wxMD5
	mkdir $(BIN)-$(VERSION)/debian
	cp -r debian/* $(BIN)-$(VERSION)/debian
	rm -Rf $(BIN)-$(VERSION)/debian/CVS
	cp Makefile $(BIN)-$(VERSION)
	cp makefile.vc $(BIN)-$(VERSION)

clean:
	rm -fr $(BUILD_DIR) $(BIN)-$(VERSION) debian/wxdfast.postinst.debhelper debian/wxdfast.postrm.debhelper debian/wxdfast.substvars debian/$(BIN) configure-stamp build-stamp

cleanall: clean
	rm -fr $(BIN) $(BIN).exe $(BIN)-$(VERSION)-src.tar.gz 
